# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# http://pastebin.com/Pz9G5s8k
set.seed(123)
require(ggplot2)
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 500
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# http://pastebin.com/Pz9G5s8k
set.seed(123)
require(ggplot2)
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 1000
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# Note that the confidence interval for 10% dog game probabilities was narrower than
# the interval for coinflip games. But here when looking at the customer holdrisk's
# intervals, the interval for 10% dog bettor is wider than for the coinflip bettor
# Comparing the 10% dog and 90% favorite bettor, even tho we had same confidence
# interval for the game probabilities, the hold risk probabilities for these two
# customers are totally different
# These are explained by the fact that customer's holdrisk is calculated by
# ROI = 1 - decimal_odds * lineprob. When betting 10% dogs the decimal_odds are
# roughly 10, so even a small change in lineprobability will change the ROI
# pretty big, because we're multiplying the line probability by decimal_odds.
# Compare this to the guy betting 90% favorites, his decimal_odds
# are ~ 1.11, so in fact his ROI is capped by 11% even if he was betting
# fixed games.
# hold
simulatedhold <- simulatedwinloss/(samplesize)
# for hold, we have multiply the 90% fav holdrisks by 10, because risk is 1 but volume only 0.1
simulatedhold[,3] <- simulatedhold[,3]*10
#apply(simulatedhold, 2, mean)
#apply(simulatedhold, 2, sd)
# Mean and confidence interval for hold, note that
cbind("2.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedhold, 2, mean), "97.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.975))))
melted_simulatedhold <- melt(simulatedhold)
colnames(melted_simulatedhold)[2] <- "Customer"
ggplot(melted_simulatedhold, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated holds") + xlab("Customer hold percentage") +
scale_x_continuous(label = percent)
e^0
exp(0)
exp(-1.68)
exp(0.1066)
a <- exp(-1.86)
a
b <- exp(0.1066)
b
a+b
a*b
exp(-1.86 + 0.1066)
memneeded <- function(s, p) {
(s-12)*s - 48*p
}
memneeded(1000000000,35000000000)
memdeeded(1e+09, 3.5e+10)
memneeded(1e+09, 3.5e+10)
memneeded(2e+08, 4e+08)
memneeded(5e+08, 5e+09)
memneeded(5e+08, 3.2e+09)
memneeded <- function(s, p) {
s*2/(4*1e+06*12)
}
memneeded(1e+09, 3.5e+10)
memneeded(2e+08, 4e+08)
memneeded(5e+08, 5e+09)
memneeded(5e+08, 3.2e+09)
12000000
memneeded <- function(s, p) {
# number of cool pairs in hot buckets
cool_pairs <- (4 * p*1000000)/s
# number of hot pairs
hot_pairs <- 1000000
tot_pairs <- cool_pairs + hot_pairs
(s^2 - 1.2e+07)48
}
memneeded <- function(s, p) {
# number of cool pairs in hot buckets
cool_pairs <- (4 * p*1000000)/s
# number of hot pairs
hot_pairs <- 1000000
tot_pairs <- cool_pairs + hot_pairs
(s^2 - 1.2e+07)*48
}
memneeded(1)
memneeded <- function(s, p = 10) {
# number of cool pairs in hot buckets
cool_pairs <- (4 * p*1000000)/s
# number of hot pairs
hot_pairs <- 1000000
tot_pairs <- cool_pairs + hot_pairs
(s^2 - 1.2e+07)*48
}
memneeded(1)
memneeded(1e+09, 3.5e+10)
memneeded(2e+08, 4e+08)
memneeded(5e+08, 5e+09)
memneeded(5e+08, 3.2e+09)
memneeded <- function(s, p = 10) {
# number of cool pairs in hot buckets
cool_pairs <- (4 * p*1000000)/s
# number of hot pairs
hot_pairs <- 1000000
tot_pairs <- cool_pairs + hot_pairs
(s^2 - 1.2e+07)/48
}
memneeded(1e+09, 3.5e+10)
memneeded(2e+08, 4e+08)
memneeded(5e+08, 5e+09)
memneeded(5e+08, 3.2e+09)
8/4/4
8/16
48*32/31
48*32/31*1000000
minmem <- function(p,s) {
p < s^2/49548387
}
minmem(1e+09, 3.5e+10)
minmem(2e+08, 4e+08)
minmem(5e+08, 5e+09)
minmem(5e+08, 3.2e+09)
minmem <- function(s, p) {
p < s^2/49548387
}
minmem(1e+09, 3.5e+10)
minmem(2e+08, 4e+08)
minmem(5e+08, 5e+09)
minmem(5e+08, 3.2e+09)
minmem <- function(s, p) {
print(p - s^2/49548387)
p < s^2/49548387
}
minmem(1e+09, 3.5e+10)
minmem(2e+08, 4e+08)
minmem(5e+08, 5e+09)
minmem(5e+08, 3.2e+09)
ls0
LS()
ls()
ls("package:base")
library(help=base)
methods("print")
methods("mean")
mean.default
length(8)
8L
length(81)
help(mean)
methods("show")
show
methods("mean")
mean
show
showMethods("show")
help(sapply)
help(subset)
dgamma
show
colSums
lm
help(lm)
help(dgamma)
help(colSums)
class(colSums)
class(dgamma)
class(lm)
lm
methods(lm)
methods(show)
methods(colSums)
methods(dgamma)
methods(mean)
getMethods(show)
mean
lm
print
methods("mean")
methods("lm")
methods(dgamma)
show
showMethods(show)
getMethod(show)
getS3Method(show)
getMethod
q2_U <- matrix(c(1,0,1,0,1,2,1,1,0,0,1,6,0,1,0,1,0,2), nrow = 3, ncol = 6, byrow = T)
q2_U
vec <- c(2,4,3,2,1)
length(vec)
vec2 <- c(0,0,1,1,0)
vec2*vec1
vec2*vec
sqrt(vec2)
vec2
sqrt(vec)
vec
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1*row2
sum_of_lengths <- sum(sqrt(row1)) + sum(sqrt(row2))
return(dotproduct/sum_of_lengths)
}
r1 <- q2_U[1,]
r2 <- q2_U[2,]
r3 <- q2_U[3,]
r1
r2
r3
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
dist(rC, rB, 1) ; dist(rA, rB, 1)
row1
r1
r2
r1 %*% r2
r1*r2
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1 %*% row2
sum_of_lengths <- sum(sqrt(row1)) + sum(sqrt(row2))
return(dotproduct/sum_of_lengths)
}
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 2) ; dist(rA, rB, 2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0.5) ; dist(rC, rB, 0.5)
q2_U
r1
r1^2
r2
r2^2
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1 %*% row2
sum_of_lengths <- sqrt(sum((row1)^2)) + sqrt(sum((row2)^2))
return(dotproduct/sum_of_lengths)
}
#rows
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
#answers
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 2) ; dist(rA, rB, 2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0.5) ; dist(rC, rB, 0.5)
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1 %*% row2
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
return(dotproduct/sum_of_lengths)
}
#rows
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 2) ; dist(rA, rB, 2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0.5) ; dist(rC, rB, 0.5)
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rB, rA, 1) ; dist(rC, rA, 1)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0) ; dist(rC, rB, 0)
dist(rB, rC, 1) ; dist(rA, rB, 1)
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1 %*% row2
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
return(dotproduct/sum_of_lengths)
}
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 2) ; dist(rA, rB, 2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0.5) ; dist(rC, rB, 0.5)
cos(0.95)
cos(0.85)
dist(rA, rB, 0) ; dist(rC, rB, 0)
rA
rB
rC
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
dotproduct <- row1 %*% row2
print(dotproduct)
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
print(sum_of_lengths)
return(dotproduct/sum_of_lengths)
}
#rows
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
dist(rC, rB, 1) ; dist(rA, rB, 1)
row1 <- rA
row2 <- rb
row2 <- rB
row1
row2
alpha <- 1
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
row1
row2
dotproduct <- row1 %*% row2
dotproduct
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
sum_of_lengths
row1
rowA <- c(0,1,1,0,1,1,0,1, 3)
rowB <- c(1,1,0,1,0,1,1,0, 4)
alpha <- 1
dist(rowA, rowB, 1)
dist(rowA, rowB, 2)
row1 <- rowA
row2 <- rowB
alpha <- 2
row1
row2
row1[length(row1)-1] <- alpha * row1[length(row1)-1]
row2[length(row2)-1] <- alpha * row2[length(row2)-1]
row2
alpha
row1
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)] <- alpha * row1[length(row1)]
row2[length(row2)] <- alpha * row2[length(row2)]
dotproduct <- row1 %*% row2
print(dotproduct)
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
print(sum_of_lengths)
return(dotproduct/sum_of_lengths)
}
rowA
rowB
dist(rowA, rowB, 2)
dist <- function(row1, row2, alpha) {
#multiply last column with alpha
row1[length(row1)] <- alpha * row1[length(row1)]
row2[length(row2)] <- alpha * row2[length(row2)]
dotproduct <- row1 %*% row2
sum_of_lengths <- sqrt(sum((row1)^2)) * sqrt(sum((row2)^2))
return(dotproduct/sum_of_lengths)
}
rA <- q2_U[1,]
rB <- q2_U[2,]
rC <- q2_U[3,]
dist(rC, rB, 1) ; dist(rA, rB, 1)
dist(rC, rB, 2) ; dist(rA, rB, 2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0.5) ; dist(rC, rB, 0.5)
dist(rowA, rowB, 2)
dist(rowA, rowB, 1/2)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rB, rA, 1) ; dist(rC, rA, 1)
dist(rA, rB, 1) ; dist(rC, rB, 1)
dist(rA, rB, 0) ; dist(rC, rB, 0)
dist(rB, rC, 1) ; dist(rA, rB, 1)
dir()
setwd("Mining-Massive-Datasets/Week4/")
dir()
file.create("Week4B_Basic.R")
q4_vec1 <- c(1,2,3)
q4_1 <- c(1,0,0)
q4_2 <- c(-3,4,-2)
q4_3 <- c(-1,-2,-3)
q4_4 <- c(1,-2,1)
q4_vec1 %*% q4_1
q4_vec1 %*% q4_2
q4_vec1 %*% q4_3
q4_vec1 %*% q4_4
